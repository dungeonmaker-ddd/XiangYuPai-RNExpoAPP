// #region 1. File Banner & TOC
/**
 * ContentArea - ÂÜÖÂÆπÂå∫ÂüüÁªÑ‰ª∂
 * 
 * ÂäüËÉΩÔºö
 * - Âä®ÊÄÅÂàóË°®Â±ïÁ§∫
 * - ‰∏ãÊãâÂà∑Êñ∞
 * - Êó†ÈôêÊªöÂä®Âä†ËΩΩ
 * - Âä®ÊÄÅÂç°Áâá‰∫§‰∫í
 * 
 * TOC (Âø´ÈÄüË∑≥ËΩ¨):
 * [1] File Banner & TOC
 * [2] Imports
 * [3] Types & Schema
 * [4] Constants & Config
 * [5] Utils & Helpers
 * [6] State Management
 * [7] Domain Logic
 * [8] UI Components & Rendering
 * [9] Exports
 */
// #endregion

// #region 2. Imports
import React, { useCallback } from 'react';
import {
  ActivityIndicator,
  Dimensions,
  StyleSheet,
  Text,
  View,
} from 'react-native';

// Á±ªÂûã
import type { Feed } from '../../../types';
import type { ContentAreaProps } from '../../types';

// ÈÖçÁΩÆ
import {
  calculateCardWidth,
  estimateFeedHeight as calculateFeedHeight,
  DISCOVERY_COLORS,
  DISCOVERY_TYPOGRAPHY,
  WATERFALL_CONFIG,
} from '../../config';

// ÁªÑ‰ª∂
import FeedCard from '../FeedCard';
import WaterfallList from './WaterfallList';
// #endregion

// #region 3. Types & Schema
// (‰ΩøÁî®ContentAreaProps from types.ts)
// #endregion

// #region 4. Constants & Config
const { width: SCREEN_WIDTH } = Dimensions.get('window');

// ‰ΩøÁî®ÈõÜ‰∏≠ÈÖçÁΩÆËÆ°ÁÆóÂç°ÁâáÂÆΩÂ∫¶
const CARD_WIDTH = calculateCardWidth(SCREEN_WIDTH);
// #endregion

// #region 5. Utils & Helpers
/**
 * ‰º∞ÁÆóFeedÂç°ÁâáÈ´òÂ∫¶
 * ÁÆóÊ≥ïÔºöÊ†πÊçÆFeedÁöÑmediaListËÆ°ÁÆóÂõæÁâáÈ´òÂ∫¶ÔºåÂä†‰∏äÂ∫ïÈÉ®‰ø°ÊÅØÂå∫ÂüüÈ´òÂ∫¶
 * 
 * ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÁ°Æ‰øù‰∏éFeedCardÈÄªËæë‰∏ÄËá¥
 */
const estimateFeedHeight = (feed: Feed, cardWidth: number): number => {
  const media = feed.mediaList?.[0];
  const imageWidth = media?.width;
  const imageHeight = media?.height;
  
  return calculateFeedHeight(imageWidth, imageHeight, cardWidth);
};
// #endregion

// #region 6. State Management
// (ÁÆÄÂçïÁªÑ‰ª∂ÔºåÁä∂ÊÄÅÁî±Áà∂ÁªÑ‰ª∂ÁÆ°ÁêÜ)
// #endregion

// #region 7. Domain Logic
/**
 * ContentArea‰∏öÂä°ÈÄªËæëHook
 */
const useContentLogic = (props: ContentAreaProps) => {
  const {
    feeds,
    loading,
    refreshing,
    hasMore,
    onRefresh,
    onLoadMore,
    onFeedPress,
    onUserPress,
    onTopicPress,
    onLike,
    onComment,
    onShare,
    onCollect,
  } = props;
  
  /**
   * Ê∏≤ÊüìÂä®ÊÄÅÂç°ÁâáÔºàÁÄëÂ∏ÉÊµÅÂ∏ÉÂ±ÄÔºâ
   * WaterfallListÁöÑrenderItemÁ≠æÂêç: (item: T, width: number) => React.ReactElement
   */
  const renderFeedCard = useCallback((item: Feed, width: number) => {
    return (
      <FeedCard
        feed={item}
        cardWidth={width}
        onPress={onFeedPress}
        onUserPress={onUserPress}
        onLike={onLike}
        onCollect={onCollect}
      />
    );
  }, [onFeedPress, onUserPress, onLike, onCollect]);
  
  /**
   * Ëé∑ÂèñFeedÂç°ÁâáÈ´òÂ∫¶
   */
  const getItemHeight = useCallback((item: Feed, width: number) => {
    return estimateFeedHeight(item, width);
  }, []);
  
  /**
   * Ê∏≤ÊüìÂàóË°®Â∫ïÈÉ®
   */
  const renderFooter = useCallback(() => {
    if (loading && feeds.length > 0) {
      return (
        <View style={styles.footer}>
          <ActivityIndicator size="small" color={DISCOVERY_COLORS.PRIMARY} />
          <Text style={styles.footerText}>Âä†ËΩΩ‰∏≠...</Text>
        </View>
      );
    }
    
    if (!hasMore && feeds.length > 0) {
      return (
        <View style={styles.footer}>
          <Text style={styles.footerText}>Ê≤°ÊúâÊõ¥Â§ö‰∫Ü</Text>
        </View>
      );
    }
    
    return null;
  }, [loading, hasMore, feeds.length]);
  
  /**
   * Ê∏≤ÊüìÁ©∫Áä∂ÊÄÅ
   */
  const renderEmpty = useCallback(() => {
    if (loading) {
      return (
        <View style={styles.emptyContainer}>
          <ActivityIndicator size="large" color={DISCOVERY_COLORS.PRIMARY} />
          <Text style={styles.emptyText}>Âä†ËΩΩ‰∏≠...</Text>
        </View>
      );
    }
    
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyIcon}>üì≠</Text>
        <Text style={styles.emptyText}>ÊöÇÊó†Âä®ÊÄÅ</Text>
      </View>
    );
  }, [loading]);
  
  /**
   * ÈîÆÊèêÂèñ
   */
  const keyExtractor = useCallback((item: Feed) => item.id, []);
  
  /**
   * Âà∞ËææÂ∫ïÈÉ®Â§ÑÁêÜ
   */
  const handleEndReached = useCallback(() => {
    if (hasMore && !loading && !refreshing) {
      onLoadMore();
    }
  }, [hasMore, loading, refreshing, onLoadMore]);
  
  return {
    feeds,
    refreshing,
    renderFeedCard,
    renderFooter,
    renderEmpty,
    keyExtractor,
    handleEndReached,
    onRefresh,
    getItemHeight,
  };
};
// #endregion

// #region 8. UI Components & Rendering
/**
 * ContentArea‰∏ªÁªÑ‰ª∂
 */
const ContentArea: React.FC<ContentAreaProps> = (props) => {
  const {
    feeds,
    refreshing,
    renderFeedCard,
    renderFooter,
    renderEmpty,
    keyExtractor,
    handleEndReached,
    onRefresh,
    getItemHeight,
  } = useContentLogic(props);
  
  return (
    <WaterfallList
      data={feeds}
      renderItem={renderFeedCard}
      keyExtractor={keyExtractor}
      numColumns={WATERFALL_CONFIG.NUM_COLUMNS}
      columnGap={WATERFALL_CONFIG.COLUMN_GAP}
      horizontalPadding={WATERFALL_CONFIG.HORIZONTAL_PADDING}
      ListFooterComponent={renderFooter()}
      ListEmptyComponent={renderEmpty()}
      getItemHeight={getItemHeight}
      onEndReached={handleEndReached}
      onEndReachedThreshold={WATERFALL_CONFIG.ON_END_REACHED_THRESHOLD}
      refreshing={refreshing}
      onRefresh={onRefresh}
    />
  );
};
// #endregion

// #region 9. Exports
const styles = StyleSheet.create({
  footer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
  },
  footerText: {
    ...DISCOVERY_TYPOGRAPHY.FOOTER_TEXT,
    color: DISCOVERY_COLORS.TEXT_TERTIARY,
    marginLeft: 8,
  },
  emptyContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 100,
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  emptyText: {
    ...DISCOVERY_TYPOGRAPHY.EMPTY_TEXT,
    color: DISCOVERY_COLORS.TEXT_TERTIARY,
  },
});

export default ContentArea;
export type { ContentAreaProps } from '../../types';
// #endregion
