// #region 1. File Banner & TOC
/**
 * countries.ts - ÂõΩÂÆ∂/Âú∞Âå∫Êï∞ÊçÆÊñá‰ª∂
 * 
 * ÂäüËÉΩÊèèËø∞Ôºö
 * - ÂÆö‰πâCountryÊé•Âè£
 * - Êèê‰æõ14‰∏™ÂõΩÂÆ∂/Âú∞Âå∫Êï∞ÊçÆ
 * - Ê†áËÆ∞ÁÉ≠Èó®Âú∞Âå∫
 * - ÊîØÊåÅÊåâÈ¶ñÂ≠óÊØçÂàÜÁªÑ
 * - FlutterÊï∞ÊçÆ100%ËøÅÁßª
 * 
 * TOC (Âø´ÈÄüË∑≥ËΩ¨):
 * [1] File Banner & TOC
 * [2] Types & Interfaces
 * [3] Country Data
 * [4] Helper Functions
 * [5] Exports
 */
// #endregion

// #region 2. Types & Interfaces
/**
 * ÂõΩÂÆ∂/Âú∞Âå∫Êé•Âè£
 */
export interface Country {
  /** ÂîØ‰∏ÄÊ†áËØÜ */
  id: string;
  
  /** ‰∏≠ÊñáÂêçÁß∞ */
  name: string;
  
  /** Ëã±ÊñáÂêçÁß∞ */
  nameEn: string;
  
  /** Âå∫Âè∑/ÂõΩÈôÖÁîµËØù‰ª£Á†Å */
  code: string;
  
  /** ÂõΩÊóóemoji */
  flag: string;
  
  /** ÊòØÂê¶‰∏∫ÁÉ≠Èó®Âú∞Âå∫ */
  popular?: boolean;
  
  /** ÊâãÊú∫Âè∑ÈïøÂ∫¶ÔºàÂèØÈÄâÔºâ */
  phoneLength?: number;
}

/**
 * ÂàÜÁªÑÂêéÁöÑÂõΩÂÆ∂ÂàóË°®Êé•Âè£
 */
export interface CountrySection {
  /** ÂàÜÁªÑÊ†áÈ¢òÔºàÈ¶ñÂ≠óÊØçÔºâ */
  title: string;
  
  /** ËØ•ÂàÜÁªÑ‰∏ãÁöÑÂõΩÂÆ∂ÂàóË°® */
  data: Country[];
}
// #endregion

// #region 3. Country Data
/**
 * ÂõΩÂÆ∂/Âú∞Âå∫Êï∞ÊçÆÂàóË°®
 * 
 * ÂåÖÂê´14‰∏™Â∏∏Áî®ÂõΩÂÆ∂ÂíåÂú∞Âå∫Ôºö
 * - 6‰∏™ÁÉ≠Èó®Âú∞Âå∫Ôºà‰∏≠ÂõΩÂ§ßÈôÜ„ÄÅÈ¶ôÊ∏Ø„ÄÅÂè∞Êπæ„ÄÅÁæéÂõΩ„ÄÅÊó•Êú¨„ÄÅÈü©ÂõΩÔºâ
 * - 8‰∏™ÂÖ∂‰ªñÂ∏∏Áî®Âú∞Âå∫
 * 
 * Êï∞ÊçÆÊù•Ê∫êÔºöFlutterÂéüÁâàÊï∞ÊçÆ
 * Â§çÂàªÂ∫¶Ôºö100%
 */
export const COUNTRIES: Country[] = [
  // üî• ÁÉ≠Èó®Âú∞Âå∫
  {
    id: '1',
    name: '‰∏≠ÂõΩÂ§ßÈôÜ',
    nameEn: 'China',
    code: '+86',
    flag: 'üá®üá≥',
    popular: true,
    phoneLength: 11,
  },
  {
    id: '2',
    name: '‰∏≠ÂõΩÈ¶ôÊ∏Ø',
    nameEn: 'Hong Kong',
    code: '+852',
    flag: 'üá≠üá∞',
    popular: true,
    phoneLength: 8,
  },
  {
    id: '3',
    name: '‰∏≠ÂõΩÊæ≥Èó®',
    nameEn: 'Macao',
    code: '+853',
    flag: 'üá≤üá¥',
    popular: false,
    phoneLength: 8,
  },
  {
    id: '4',
    name: '‰∏≠ÂõΩÂè∞Êπæ',
    nameEn: 'Taiwan',
    code: '+886',
    flag: 'üáπüáº',
    popular: true,
    phoneLength: 10,
  },
  {
    id: '5',
    name: 'ÁæéÂõΩ',
    nameEn: 'United States',
    code: '+1',
    flag: 'üá∫üá∏',
    popular: true,
    phoneLength: 10,
  },
  {
    id: '6',
    name: 'Êó•Êú¨',
    nameEn: 'Japan',
    code: '+81',
    flag: 'üáØüáµ',
    popular: true,
    phoneLength: 11,
  },
  {
    id: '7',
    name: 'Èü©ÂõΩ',
    nameEn: 'South Korea',
    code: '+82',
    flag: 'üá∞üá∑',
    popular: true,
    phoneLength: 11,
  },
  
  // ÂÖ∂‰ªñÂ∏∏Áî®Âú∞Âå∫
  {
    id: '8',
    name: 'Ëã±ÂõΩ',
    nameEn: 'United Kingdom',
    code: '+44',
    flag: 'üá¨üáß',
    popular: false,
    phoneLength: 10,
  },
  {
    id: '9',
    name: 'Ê≥ïÂõΩ',
    nameEn: 'France',
    code: '+33',
    flag: 'üá´üá∑',
    popular: false,
    phoneLength: 9,
  },
  {
    id: '10',
    name: 'Âæ∑ÂõΩ',
    nameEn: 'Germany',
    code: '+49',
    flag: 'üá©üá™',
    popular: false,
    phoneLength: 11,
  },
  {
    id: '11',
    name: 'Êæ≥Â§ßÂà©‰∫ö',
    nameEn: 'Australia',
    code: '+61',
    flag: 'üá¶üá∫',
    popular: false,
    phoneLength: 9,
  },
  {
    id: '12',
    name: 'Âä†ÊãøÂ§ß',
    nameEn: 'Canada',
    code: '+1',
    flag: 'üá®üá¶',
    popular: false,
    phoneLength: 10,
  },
  {
    id: '13',
    name: 'Êñ∞Âä†Âù°',
    nameEn: 'Singapore',
    code: '+65',
    flag: 'üá∏üá¨',
    popular: false,
    phoneLength: 8,
  },
  {
    id: '14',
    name: 'È©¨Êù•Ë•ø‰∫ö',
    nameEn: 'Malaysia',
    code: '+60',
    flag: 'üá≤üáæ',
    popular: false,
    phoneLength: 10,
  },
];
// #endregion

// #region 4. Helper Functions
/**
 * Ëé∑ÂèñÈ¶ñÂ≠óÊØç
 * 
 * @param nameEn - Ëã±ÊñáÂêçÁß∞
 * @returns Â§ßÂÜôÈ¶ñÂ≠óÊØç
 * 
 * @example
 * getFirstLetter('China') // 'C'
 * getFirstLetter('United States') // 'U'
 */
export const getFirstLetter = (nameEn: string): string => {
  return nameEn.charAt(0).toUpperCase();
};

/**
 * ÊåâÈ¶ñÂ≠óÊØçÂàÜÁªÑÂõΩÂÆ∂ÂàóË°®
 * 
 * @param countries - ÂõΩÂÆ∂ÂàóË°®
 * @returns ÂàÜÁªÑÂêéÁöÑÂõΩÂÆ∂ÂàóË°®
 * 
 * @example
 * groupCountries(COUNTRIES)
 * // [
 * //   { title: 'A', data: [Australia] },
 * //   { title: 'C', data: [China, Canada] },
 * //   ...
 * // ]
 */
export const groupCountries = (countries: Country[]): CountrySection[] => {
  const grouped: Record<string, Country[]> = {};
  
  countries.forEach(country => {
    const letter = getFirstLetter(country.nameEn);
    if (!grouped[letter]) {
      grouped[letter] = [];
    }
    grouped[letter].push(country);
  });
  
  // ÊåâÂ≠óÊØçÊéíÂ∫è
  const sorted = Object.keys(grouped)
    .sort()
    .map(letter => ({
      title: letter,
      data: grouped[letter],
    }));
  
  return sorted;
};

/**
 * ËøáÊª§ÂõΩÂÆ∂ÂàóË°®
 * 
 * ÊîØÊåÅÊåâ‰∏≠ÊñáÂêç„ÄÅËã±ÊñáÂêç„ÄÅÂå∫Âè∑ÊêúÁ¥¢
 * 
 * @param countries - ÂõΩÂÆ∂ÂàóË°®
 * @param keyword - ÊêúÁ¥¢ÂÖ≥ÈîÆËØç
 * @returns ËøáÊª§ÂêéÁöÑÂõΩÂÆ∂ÂàóË°®
 * 
 * @example
 * filterCountries(COUNTRIES, '‰∏≠ÂõΩ')
 * // [‰∏≠ÂõΩÂ§ßÈôÜ, ‰∏≠ÂõΩÈ¶ôÊ∏Ø, ‰∏≠ÂõΩÊæ≥Èó®, ‰∏≠ÂõΩÂè∞Êπæ]
 * 
 * filterCountries(COUNTRIES, 'united')
 * // [United States, United Kingdom]
 * 
 * filterCountries(COUNTRIES, '+86')
 * // [‰∏≠ÂõΩÂ§ßÈôÜ]
 */
export const filterCountries = (
  countries: Country[],
  keyword: string
): Country[] => {
  if (!keyword) return countries;
  
  const lowerKeyword = keyword.toLowerCase();
  
  return countries.filter(country =>
    country.name.toLowerCase().includes(lowerKeyword) ||
    country.nameEn.toLowerCase().includes(lowerKeyword) ||
    country.code.includes(keyword)
  );
};

/**
 * Ëé∑ÂèñÁÉ≠Èó®Âú∞Âå∫ÂàóË°®
 * 
 * @param countries - ÂõΩÂÆ∂ÂàóË°®
 * @returns ÁÉ≠Èó®Âú∞Âå∫ÂàóË°®
 * 
 * @example
 * getHotCountries(COUNTRIES)
 * // [‰∏≠ÂõΩÂ§ßÈôÜ, ‰∏≠ÂõΩÈ¶ôÊ∏Ø, ‰∏≠ÂõΩÂè∞Êπæ, ÁæéÂõΩ, Êó•Êú¨, Èü©ÂõΩ]
 */
export const getHotCountries = (countries: Country[]): Country[] => {
  return countries.filter(c => c.popular === true);
};

/**
 * Ê†πÊçÆÂå∫Âè∑Êü•ÊâæÂõΩÂÆ∂
 * 
 * @param countries - ÂõΩÂÆ∂ÂàóË°®
 * @param code - Âå∫Âè∑
 * @returns ÂõΩÂÆ∂ÂØπË±°ÔºåÊú™ÊâæÂà∞ËøîÂõûnull
 * 
 * @example
 * findCountryByCode(COUNTRIES, '+86')
 * // { id: '1', name: '‰∏≠ÂõΩÂ§ßÈôÜ', ... }
 * 
 * findCountryByCode(COUNTRIES, '+999')
 * // null
 */
export const findCountryByCode = (
  countries: Country[],
  code: string
): Country | null => {
  return countries.find(c => c.code === code) || null;
};

/**
 * Ê†πÊçÆIDÊü•ÊâæÂõΩÂÆ∂
 * 
 * @param countries - ÂõΩÂÆ∂ÂàóË°®
 * @param id - ÂõΩÂÆ∂ID
 * @returns ÂõΩÂÆ∂ÂØπË±°ÔºåÊú™ÊâæÂà∞ËøîÂõûnull
 * 
 * @example
 * findCountryById(COUNTRIES, '1')
 * // { id: '1', name: '‰∏≠ÂõΩÂ§ßÈôÜ', ... }
 */
export const findCountryById = (
  countries: Country[],
  id: string
): Country | null => {
  return countries.find(c => c.id === id) || null;
};

/**
 * Ëé∑ÂèñÈªòËÆ§ÂõΩÂÆ∂Ôºà‰∏≠ÂõΩÂ§ßÈôÜÔºâ
 * 
 * @returns ÈªòËÆ§ÂõΩÂÆ∂ÂØπË±°
 * 
 * @example
 * getDefaultCountry()
 * // { id: '1', name: '‰∏≠ÂõΩÂ§ßÈôÜ', code: '+86', ... }
 */
export const getDefaultCountry = (): Country => {
  return COUNTRIES[0]; // ‰∏≠ÂõΩÂ§ßÈôÜ
};

/**
 * È™åËØÅÂå∫Âè∑ÊòØÂê¶Â≠òÂú®
 * 
 * @param code - Âå∫Âè∑
 * @returns ÊòØÂê¶Â≠òÂú®
 * 
 * @example
 * isValidCountryCode('+86') // true
 * isValidCountryCode('+999') // false
 */
export const isValidCountryCode = (code: string): boolean => {
  return COUNTRIES.some(c => c.code === code);
};

/**
 * Ëé∑ÂèñÂõΩÂÆ∂ÊÄªÊï∞
 * 
 * @returns ÂõΩÂÆ∂ÊÄªÊï∞
 */
export const getTotalCountries = (): number => {
  return COUNTRIES.length;
};

/**
 * Ëé∑ÂèñÁÉ≠Èó®Âú∞Âå∫ÊÄªÊï∞
 * 
 * @returns ÁÉ≠Èó®Âú∞Âå∫ÊÄªÊï∞
 */
export const getHotCountriesCount = (): number => {
  return getHotCountries(COUNTRIES).length;
};
// #endregion

// #region 5. Exports
export default COUNTRIES;

// ÂØºÂá∫Â∏∏Èáè
export const DEFAULT_COUNTRY = getDefaultCountry();
export const HOT_COUNTRIES = getHotCountries(COUNTRIES);
export const TOTAL_COUNTRIES = getTotalCountries();
export const HOT_COUNTRIES_COUNT = getHotCountriesCount();

// ÂØºÂá∫Á±ªÂûã
export type { Country, CountrySection };
// #endregion

