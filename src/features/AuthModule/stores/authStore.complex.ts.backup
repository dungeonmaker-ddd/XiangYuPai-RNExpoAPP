/**
 * Auth Store - 认证主状态管理
 * 
 * 基于Zustand的认证状态管理，提供：
 * - 用户认证状态管理
 * - 登录/退出逻辑
 * - 令牌管理
 * - 用户信息存储
 */

import AsyncStorage from '@react-native-async-storage/async-storage';
import * as SecureStore from 'expo-secure-store';
import { create } from 'zustand';
import { createJSONStorage, persist } from 'zustand/middleware';

// Types
import type {
    AuthMode,
    LoginRequest,
    LoginResponse,
    UserInfo
} from '../LoginMainPage/types';

// API services
import { authApi } from '../api/authApi';

// Constants
import { DEFAULT_STATE_VALUES, SECURE_KEYS } from '../LoginMainPage/constants';

// #region 类型定义

/**
 * 认证状态接口
 */
export interface AuthState {
  // 认证状态
  isAuthenticated: boolean;
  isInitialized: boolean;
  
  // 用户信息
  userInfo: UserInfo | null;
  
  // 认证令牌
  accessToken: string | null;
  refreshToken: string | null;
  tokenExpiry: Date | null;
  
  // 登录配置
  loginMode: AuthMode;
  rememberUser: boolean;
  
  // 会话信息
  lastLoginTime: Date | null;
  deviceId: string | null;
  
  // 生物识别
  biometricEnabled: boolean;
  biometricAvailable: boolean;
}

/**
 * 认证操作接口
 */
export interface AuthActions {
  // 初始化
  initialize: () => Promise<void>;
  
  // 登录操作
  login: (credentials?: LoginRequest) => Promise<void>;
  passwordLogin: (phone: string, password: string, region: string) => Promise<void>;
  smsLogin: (phone: string, code: string, region: string) => Promise<void>;
  
  // 退出登录
  logout: () => Promise<void>;
  clearAuthData: () => void;
  
  // 令牌管理
  refreshToken: () => Promise<void>;
  validateToken: () => Promise<boolean>;
  
  // 状态更新
  setUserInfo: (userInfo: UserInfo) => void;
  setLoginMode: (mode: AuthMode) => void;
  switchMode: (mode: AuthMode) => void;
  setRememberUser: (remember: boolean) => void;
  
  // 生物识别
  setBiometricEnabled: (enabled: boolean) => void;
  checkBiometricAvailability: () => Promise<void>;
  
  // 会话管理
  updateLastLoginTime: () => void;
  isTokenExpired: () => boolean;
  
  // 设备管理
  setDeviceId: (deviceId: string) => void;
}

/**
 * 完整的认证Store类型
 */
export type AuthStore = AuthState & AuthActions;

// #endregion

// #region 初始状态

/**
 * 认证状态默认值
 */
const initialAuthState: AuthState = {
  isAuthenticated: false,
  isInitialized: false,
  userInfo: null,
  accessToken: null,
  refreshToken: null,
  tokenExpiry: null,
  loginMode: DEFAULT_STATE_VALUES.loginMode,
  rememberUser: true,
  lastLoginTime: null,
  deviceId: null,
  biometricEnabled: false,
  biometricAvailable: false,
};

// #endregion

// #region 工具函数

/**
 * 安全存储操作
 */
const secureStorage = {
  async setItem(key: string, value: string): Promise<void> {
    try {
      await SecureStore.setItemAsync(key, value);
    } catch (error) {
      console.error('SecureStore setItem error:', error);
      // 降级到AsyncStorage
      await AsyncStorage.setItem(`secure_${key}`, value);
    }
  },
  
  async getItem(key: string): Promise<string | null> {
    try {
      return await SecureStore.getItemAsync(key);
    } catch (error) {
      console.error('SecureStore getItem error:', error);
      // 降级到AsyncStorage
      return await AsyncStorage.getItem(`secure_${key}`);
    }
  },
  
  async deleteItem(key: string): Promise<void> {
    try {
      await SecureStore.deleteItemAsync(key);
    } catch (error) {
      console.error('SecureStore deleteItem error:', error);
      // 降级到AsyncStorage
      await AsyncStorage.removeItem(`secure_${key}`);
    }
  },
};

/**
 * 令牌工具函数
 */
const tokenUtils = {
  /**
   * 检查令牌是否过期
   */
  isExpired(expiry: Date | null): boolean {
    if (!expiry) return true;
    return new Date() >= expiry;
  },
  
  /**
   * 解析令牌过期时间
   */
  parseExpiry(token: string): Date | null {
    try {
      // 简单的JWT解析（实际项目中可能需要更完善的JWT库）
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp ? new Date(payload.exp * 1000) : null;
    } catch (error) {
      console.error('Token parsing error:', error);
      return null;
    }
  },
  
  /**
   * 验证令牌格式
   */
  isValid(token: string): boolean {
    if (!token) return false;
    const parts = token.split('.');
    return parts.length === 3;
  },
};

/**
 * 设备ID生成器
 */
const generateDeviceId = (): string => {
  return `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

// #endregion

// #region Store创建

/**
 * 创建认证Store
 */
export const useAuthStore = create<AuthStore>()(
  persist(
    (set, get) => ({
      // 初始状态
      ...initialAuthState,
      
      // #region 初始化操作
      
      /**
       * 初始化认证状态
       */
      initialize: async () => {
        try {
          console.log('🔐 Initializing auth store...');
          
          // 从安全存储中恢复令牌
          const accessToken = await secureStorage.getItem(SECURE_KEYS.ACCESS_TOKEN);
          const refreshToken = await secureStorage.getItem(SECURE_KEYS.REFRESH_TOKEN);
          const userCredentials = await secureStorage.getItem(SECURE_KEYS.USER_CREDENTIALS);
          
          let userInfo: UserInfo | null = null;
          
          // 解析用户凭据
          if (userCredentials) {
            try {
              userInfo = JSON.parse(userCredentials);
            } catch (error) {
              console.error('Parse user credentials error:', error);
            }
          }
          
          // 检查令牌有效性
          const tokenExpiry = accessToken ? tokenUtils.parseExpiry(accessToken) : null;
          const isTokenValid = accessToken && tokenUtils.isValid(accessToken) && !tokenUtils.isExpired(tokenExpiry);
          
          // 生成设备ID（如果不存在）
          const currentState = get();
          const deviceId = currentState.deviceId || generateDeviceId();
          
          // 更新状态
          set({
            accessToken: isTokenValid ? accessToken : null,
            refreshToken: isTokenValid ? refreshToken : null,
            tokenExpiry,
            userInfo: isTokenValid ? userInfo : null,
            isAuthenticated: isTokenValid,
            isInitialized: true,
            deviceId,
          });
          
          // 如果令牌过期但有刷新令牌，尝试刷新
          if (!isTokenValid && refreshToken && tokenUtils.isValid(refreshToken)) {
            try {
              await get().refreshToken();
            } catch (error) {
              console.log('Auto refresh failed:', error);
              // 刷新失败，清除所有认证数据
              await get().clearAuthData();
            }
          }
          
          console.log('✅ Auth store initialized successfully');
        } catch (error) {
          console.error('❌ Auth store initialization failed:', error);
          set({
            isInitialized: true,
            isAuthenticated: false,
          });
        }
      },
      
      // #endregion
      
      // #region 登录操作
      
      /**
       * 通用登录方法
       */
      login: async (credentials) => {
        try {
          console.log('🔑 Starting login process...');
          
          if (!credentials) {
            throw new Error('Login credentials are required');
          }
          
          // 添加设备ID到请求中
          const loginRequest: LoginRequest = {
            ...credentials,
            deviceId: get().deviceId || generateDeviceId(),
          };
          
          // 调用登录API
          const response: LoginResponse = await authApi.login(loginRequest);
          
          if (!response.success || !response.data) {
            throw new Error(response.message || 'Login failed');
          }
          
          const { token, refreshToken: newRefreshToken, userInfo, expiresIn } = response.data;
          
          // 计算令牌过期时间
          const tokenExpiry = new Date(Date.now() + expiresIn * 1000);
          
          // 保存到安全存储
          await secureStorage.setItem(SECURE_KEYS.ACCESS_TOKEN, token);
          await secureStorage.setItem(SECURE_KEYS.REFRESH_TOKEN, newRefreshToken);
          await secureStorage.setItem(SECURE_KEYS.USER_CREDENTIALS, JSON.stringify(userInfo));
          
          // 更新状态
          set({
            isAuthenticated: true,
            accessToken: token,
            refreshToken: newRefreshToken,
            tokenExpiry,
            userInfo,
            lastLoginTime: new Date(),
          });
          
          console.log('✅ Login successful');
        } catch (error) {
          console.error('❌ Login failed:', error);
          throw error;
        }
      },
      
      /**
       * 密码登录
       */
      passwordLogin: async (phone, password, region) => {
        const credentials: LoginRequest = {
          phone,
          password,
          region,
        };
        
        await get().login(credentials);
      },
      
      /**
       * 验证码登录
       */
      smsLogin: async (phone, smsCode, region) => {
        const credentials: LoginRequest = {
          phone,
          smsCode,
          region,
        };
        
        await get().login(credentials);
      },
      
      // #endregion
      
      // #region 退出登录
      
      /**
       * 退出登录
       */
      logout: async () => {
        try {
          console.log('👋 Starting logout process...');
          
          // 调用退出API（可选）
          const { accessToken } = get();
          if (accessToken) {
            try {
              await authApi.logout();
            } catch (error) {
              console.warn('Logout API call failed:', error);
              // 即使API调用失败，也要清除本地数据
            }
          }
          
          // 清除认证数据
          await get().clearAuthData();
          
          console.log('✅ Logout successful');
        } catch (error) {
          console.error('❌ Logout failed:', error);
          // 即使出错，也要清除本地数据
          await get().clearAuthData();
        }
      },
      
      /**
       * 清除认证数据
       */
      clearAuthData: () => {
        // 清除安全存储
        secureStorage.deleteItem(SECURE_KEYS.ACCESS_TOKEN);
        secureStorage.deleteItem(SECURE_KEYS.REFRESH_TOKEN);
        secureStorage.deleteItem(SECURE_KEYS.USER_CREDENTIALS);
        
        // 重置状态
        set({
          isAuthenticated: false,
          accessToken: null,
          refreshToken: null,
          tokenExpiry: null,
          userInfo: null,
          lastLoginTime: null,
        });
      },
      
      // #endregion
      
      // #region 令牌管理
      
      /**
       * 刷新令牌
       */
      refreshToken: async () => {
        try {
          const { refreshToken: currentRefreshToken } = get();
          
          if (!currentRefreshToken || !tokenUtils.isValid(currentRefreshToken)) {
            throw new Error('Invalid refresh token');
          }
          
          console.log('🔄 Refreshing token...');
          
          // 调用刷新令牌API
          const response = await authApi.refreshToken(currentRefreshToken);
          
          if (!response.success || !response.data) {
            throw new Error(response.message || 'Token refresh failed');
          }
          
          const { token, refreshToken: newRefreshToken, expiresIn } = response.data;
          const tokenExpiry = new Date(Date.now() + expiresIn * 1000);
          
          // 保存到安全存储
          await secureStorage.setItem(SECURE_KEYS.ACCESS_TOKEN, token);
          await secureStorage.setItem(SECURE_KEYS.REFRESH_TOKEN, newRefreshToken);
          
          // 更新状态
          set({
            accessToken: token,
            refreshToken: newRefreshToken,
            tokenExpiry,
            isAuthenticated: true,
          });
          
          console.log('✅ Token refreshed successfully');
        } catch (error) {
          console.error('❌ Token refresh failed:', error);
          // 刷新失败，清除认证状态
          await get().clearAuthData();
          throw error;
        }
      },
      
      /**
       * 验证令牌
       */
      validateToken: async () => {
        const { accessToken, tokenExpiry } = get();
        
        if (!accessToken || !tokenUtils.isValid(accessToken)) {
          return false;
        }
        
        if (tokenUtils.isExpired(tokenExpiry)) {
          // 令牌过期，尝试刷新
          try {
            await get().refreshToken();
            return true;
          } catch (error) {
            return false;
          }
        }
        
        return true;
      },
      
      // #endregion
      
      // #region 状态更新
      
      /**
       * 设置用户信息
       */
      setUserInfo: (userInfo) => {
        set({ userInfo });
        
        // 同步到安全存储
        secureStorage.setItem(SECURE_KEYS.USER_CREDENTIALS, JSON.stringify(userInfo));
      },
      
      /**
       * 设置登录模式
       */
      setLoginMode: (mode) => {
        set({ loginMode: mode });
      },
      
      /**
       * 切换登录模式
       */
      switchMode: (mode) => {
        set({ loginMode: mode });
      },
      
      /**
       * 设置记住用户
       */
      setRememberUser: (remember) => {
        set({ rememberUser: remember });
      },
      
      // #endregion
      
      // #region 生物识别
      
      /**
       * 设置生物识别启用状态
       */
      setBiometricEnabled: (enabled) => {
        set({ biometricEnabled: enabled });
      },
      
      /**
       * 检查生物识别可用性
       */
      checkBiometricAvailability: async () => {
        try {
          // 这里集成expo-local-authentication
          // const { isAvailable } = await LocalAuthentication.hasHardwareAsync();
          // set({ biometricAvailable: isAvailable });
          
          // 暂时设置为false，后续集成生物识别时启用
          set({ biometricAvailable: false });
        } catch (error) {
          console.error('Check biometric availability error:', error);
          set({ biometricAvailable: false });
        }
      },
      
      // #endregion
      
      // #region 会话管理
      
      /**
       * 更新最后登录时间
       */
      updateLastLoginTime: () => {
        set({ lastLoginTime: new Date() });
      },
      
      /**
       * 检查令牌是否过期
       */
      isTokenExpired: () => {
        const { tokenExpiry } = get();
        return tokenUtils.isExpired(tokenExpiry);
      },
      
      /**
       * 设置设备ID
       */
      setDeviceId: (deviceId) => {
        set({ deviceId });
      },
      
      // #endregion
    }),
    {
      name: 'auth-store',
      storage: createJSONStorage(() => AsyncStorage),
      // 只持久化部分状态
      partialize: (state) => ({
        loginMode: state.loginMode as AuthMode,
        rememberUser: state.rememberUser as boolean,
        deviceId: state.deviceId as string | null,
        biometricEnabled: state.biometricEnabled as boolean,
        lastLoginTime: state.lastLoginTime as Date | null,
      }),
      // 版本控制
      version: 1,
      migrate: (persistedState: any, version: number) => {
        console.log('🔄 Migrating auth store from version:', version);
        return persistedState as AuthStore;
      },
    }
  )
);

// #endregion

// #region 导出

// 便捷的选择器函数
export const authSelectors = {
  isAuthenticated: (state: AuthStore) => state.isAuthenticated,
  userInfo: (state: AuthStore) => state.userInfo,
  loginMode: (state: AuthStore) => state.loginMode,
  isTokenExpired: (state: AuthStore) => state.isTokenExpired(),
};

// Note: 类型已在上面定义并导出，这里不需要重复导出

// #endregion
